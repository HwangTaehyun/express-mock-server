{"version":3,"file":"http-post-matcher.js","names":["matchRecordPost","req","bundle","matches","getMatchesByQueryString","sort","a","b","result","compare","requestBody","body","searchedRecord","searchedRecordDefault","searchedRecordRegex","forEach","record","type","value","re","RegExp","str","JSON","stringify","match","isMatched","matchType","recordBodyValue","parse","Object","keys","key","isRequestBodyEmpty"],"sources":["../../../lib/core/matchers/http-post-matcher.js"],"sourcesContent":["import { getMatchesByQueryString } from './query-string-matcher';\n\n/**\n * TODO refaktor jako v getu do MatchItem\n */\nexport const matchRecordPost = (req, bundle) => {\n  let matches = getMatchesByQueryString(req, bundle);\n  matches.sort((a, b) => {\n    return b.result.compare(a.result);\n  });\n\n  let requestBody = req.body;\n\n  // console.log('***********');\n  // console.log(requestBody);\n  // console.log('=========== matches count: '+matches.length);\n  // myLog(matches);\n  // console.log('..................');\n\n  let searchedRecord = null;\n  let searchedRecordDefault = null;\n  let searchedRecordRegex = null;\n  matches.forEach(({ record }) => {\n    let { body } = record;\n    if (!!body) {\n      if (!!body.type && !!body.value) {\n        switch (body.type) {\n          case 'REGEX': {\n            let value = body.value;\n\n            var re = new RegExp(value, 'g');\n            var str = JSON.stringify(requestBody);\n            var result = str.match(re);\n            // console.log('+++++++++++++');\n            // console.log(str);\n            // console.log(value);\n            // console.log(result);\n\n            let isMatched = !!result;\n            if (isMatched && !searchedRecordRegex) {\n              searchedRecordRegex = record;\n            }\n            // console.log('REGEX '+!!result);\n            break;\n          }\n          case 'JSON': {\n            // match only filled\n            if (body.matchType && body.matchType === 'ONLY_MATCHING_FIELDS') {\n              let recordBodyValue = JSON.parse(body.value);\n\n              // let requestBodyKeysLength = Object.keys(requestBody).length;\n              // let recordBodyKeysLength = Object.keys(recordBodyValue).length;\n              // if(requestBodyKeysLength === recordBodyKeysLength){\n              let isMatched = true;\n              Object.keys(recordBodyValue).forEach((key) => {\n                let value = recordBodyValue[key];\n                if (\n                  JSON.stringify(value) !== JSON.stringify(requestBody[key])\n                ) {\n                  isMatched = false;\n                }\n              });\n              if (isMatched && !searchedRecord) {\n                searchedRecord = record;\n              }\n              // console.log('TEST FOR MATCH = '+isMatched);\n              // }else{\n              // console.log('NO MATCH');\n              // }\n              break; // break only if type is ONLY_MATCHING_FIELDS\n            }\n          }\n          case 'STRING':\n          default: {\n            // exact match\n            // console.log('******');\n            // console.log(body.value);\n            // console.log('------------');\n            // console.log(JSON.stringify(requestBody));\n            // console.log('=============');\n            // console.log(body.value === JSON.stringify(requestBody));\n\n            let isMatched = body.value === JSON.stringify(requestBody);\n            if (isMatched && !searchedRecord) {\n              searchedRecord = record;\n            }\n            // console.log('EXACT DEFAULT '+isMatched);\n          }\n        }\n      } else {\n        let isMatched = body === JSON.stringify(requestBody);\n        if (isMatched && !searchedRecord) {\n          searchedRecord = record;\n        }\n        // console.log('EXACT');\n        // exact match\n      }\n    } else {\n      let isRequestBodyEmpty =\n        !requestBody || JSON.stringify(requestBody) === '{}';\n      // console.log('ELSE');\n      // console.log('isRequestBodyEmpty '+isRequestBodyEmpty);\n      // console.log(requestBody);\n      if (isRequestBodyEmpty && !searchedRecord) {\n        searchedRecord = record;\n      } else if (!searchedRecordDefault) {\n        searchedRecordDefault = record;\n      }\n    }\n\n    // myLog(record);\n  });\n\n  if (!searchedRecord) {\n    searchedRecord = searchedRecordRegex;\n  }\n  if (!searchedRecord) {\n    searchedRecord = searchedRecordDefault;\n  }\n\n  // console.log('POST RESULT'.yellow);\n  // console.log(JSON.stringify(searchedRecord, null, \"  \"));\n  return searchedRecord;\n};\n"],"mappings":"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"}